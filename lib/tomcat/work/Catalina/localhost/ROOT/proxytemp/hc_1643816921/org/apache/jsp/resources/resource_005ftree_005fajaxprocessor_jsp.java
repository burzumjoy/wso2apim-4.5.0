/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.94
 * Generated at: 2025-07-24 19:55:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.carbon.core.RegistryResources;
import org.wso2.carbon.registry.core.RegistryConstants;
import org.wso2.carbon.registry.resource.ui.Utils;
import org.wso2.carbon.registry.resource.ui.clients.ResourceServiceClient;
import org.wso2.carbon.utils.ServerConstants;
import java.util.Stack;
import org.wso2.carbon.registry.core.utils.RegistryUtils;
import org.wso2.carbon.registry.resource.stub.beans.xsd.ResourceTreeEntryBean;
import org.owasp.encoder.Encode;

public final class resource_005ftree_005fajaxprocessor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/tlds/fmt.tld", Long.valueOf(1741069184000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(12);
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.beans.xsd.ResourceTreeEntryBean");
    _jspx_imports_classes.add("org.wso2.carbon.registry.core.RegistryConstants");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.ui.Utils");
    _jspx_imports_classes.add("org.wso2.carbon.registry.core.utils.RegistryUtils");
    _jspx_imports_classes.add("org.wso2.carbon.utils.ServerConstants");
    _jspx_imports_classes.add("org.wso2.carbon.core.RegistryResources");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.ui.clients.ResourceServiceClient");
    _jspx_imports_classes.add("java.util.Stack");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.release();
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String viewMode = Utils.getResourceViewMode(request);
    String resourceConsumer = Utils.getResourceConsumer(request);
    String errorMessage = null;
    String textBoxId = request.getParameter("textBoxId");
    String treeNavigationPath = request.getParameter("displayTreeNavigation");
    String rootName = request.getParameter("rootName");
    boolean relativeRoot = request.getParameter("relativeRoot") != null;
    if (rootName == null || rootName.length() == 0) {
        rootName = "root";
    }
    Object expansionPathObj = session.getAttribute("resource-tree-expansion-path");
    String expansionPath = null;
    if (expansionPathObj != null && expansionPathObj instanceof String) {
        expansionPath = (String)expansionPathObj;
    }
    boolean displayTreeNavigation = treeNavigationPath != null;
    String onOKCallback = request.getParameter("onOKCallback");
    String synapseRegistryMetaDataRootPath =
             RegistryResources.ROOT + "esb"
            + RegistryConstants.PATH_SEPARATOR + "registry";
    String synapseRegistryRoot = "";
    boolean displayResourceTree = false;
    String rootPath = request.getParameter("rootPath");
    if (rootPath == null) {
        rootPath = "/";
    }
    String displayRootPath = request.getParameter("displayRootPath");
    String displayPath;
    if ("true".equals(displayRootPath)) {
    	displayPath = "/_system/governance";
    } else {
    	displayPath = rootPath;
    }

    try {
        String cookie = (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
        ResourceServiceClient client = new ResourceServiceClient(cookie, config, session);
        synapseRegistryRoot = client.getProperty(synapseRegistryMetaDataRootPath, "SYNAPSE_REGISTRY_ROOT");
        if (client.getResourceTreeEntry(rootPath) != null) {
            displayResourceTree = true;
        }
    } catch (Exception ignored) {
    }

      out.write("\n");
      out.write("<!-- other includes -->\n");
      out.write("<div style=\"display:none\">&nbsp;</div><!-- This div is to fix a ie issue. please dont remove it-->\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../registry_common/registry_common-i18n-ajaxprocessor.jsp", out, false);
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"../registry_common/js/registry_validation.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../registry_common/js/registry_common.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../ajax/js/prototype.js\"></script>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../resources/resources-i18n-ajaxprocessor.jsp", out, false);
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"../resources/js/resource_util.js\"></script>\n");
      out.write("<script src=\"../global-params.js\" type=\"text/javascript\"></script>\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"../resources/css/registry.css\"/>\n");
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (errorMessage != null) { 
      out.write("\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        location.href = '../admin/error.jsp?errorMsg=");
      out.print(errorMessage);
      out.write("';\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
 } else {
            if (!displayTreeNavigation) {
      out.write("\n");
      out.write("    ");
      //  fmt:bundle
      org.apache.taglibs.standard.tag.rt.fmt.BundleTag _jspx_th_fmt_005fbundle_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.BundleTag) _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.get(org.apache.taglibs.standard.tag.rt.fmt.BundleTag.class);
      boolean _jspx_th_fmt_005fbundle_005f0_reused = false;
      try {
        _jspx_th_fmt_005fbundle_005f0.setPageContext(_jspx_page_context);
        _jspx_th_fmt_005fbundle_005f0.setParent(null);
        // /resources/resource_tree_ajaxprocessor.jsp(95,4) name = basename type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_fmt_005fbundle_005f0.setBasename("org.wso2.carbon.registry.resource.ui.i18n.Resources");
        int _jspx_eval_fmt_005fbundle_005f0 = _jspx_th_fmt_005fbundle_005f0.doStartTag();
        if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_fmt_005fbundle_005f0);
          }
          do {
            out.write("\n");
            out.write("    <div class=\"headding-tree-back\">\n");
            out.write("        <h1 class=\"headding-tree\">");
            if (_jspx_meth_fmt_005fmessage_005f0(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("</h1>\n");
            out.write("    </div>\n");
            out.write("    <div id=\"local-registry-placeholder\" style=\"display:none\"></div>\n");
            out.write("    <div class=\"resource-tree-headding\">\n");
            out.write("        ");
            if (_jspx_meth_fmt_005fmessage_005f1(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write(" : <input type=\"text\" id=\"pickedPath\"\n");
            out.write("                                                class=\"picked-path-textbox\" ");
            out.print( (expansionPath != null) ? "value=\"" + expansionPath + "\"" : "");
            out.write(" style=\"width:500px;\"\n");
            out.write("                                                onfocus=\"setResolvedResourcePathOnConsumer('");
            out.print(Encode.forJavaScript(resourceConsumer));
            out.write('\'');
            out.write(',');
            out.write('\'');
            out.print(synapseRegistryRoot);
            out.write("');\" onchange=\"setResolvedResourcePathOnConsumer('");
            out.print(Encode.forJavaScript(resourceConsumer));
            out.write('\'');
            out.write(',');
            out.write('\'');
            out.print(synapseRegistryRoot);
            out.write("')\"/>\n");
            out.write("                                            <input type=\"button\" class=\"button\" value=\"");
            if (_jspx_meth_fmt_005fmessage_005f2(_jspx_th_fmt_005fbundle_005f0, _jspx_page_context))
              return;
            out.write("\"\n");
            out.write("                                                   onclick=\"if ((typeof(isMediationLocalEntrySelected) == undefined )|| !isMediationLocalEntrySelected) { if (validateResoucePath()) { handle");
            out.print( relativeRoot ? "Relative" : "" );
            out.write("WindowOk(");
            out.print( relativeRoot ? "'" + Encode.forHtml(displayPath) + "', " : "" );
            out.write('\'');
            out.print(Encode.forJavaScript(textBoxId));
            out.write('\'');
            out.print( onOKCallback != null ? ", " + Encode.forJavaScript(onOKCallback) : "");
            out.write("); CARBON.closeWindow(); return true; } return false; }; CARBON.closeWindow(); return true;\"/>\n");
            out.write("    </div>\n");
            out.write("    ");
            int evalDoAfterBody = _jspx_th_fmt_005fbundle_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_fmt_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.reuse(_jspx_th_fmt_005fbundle_005f0);
        _jspx_th_fmt_005fbundle_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fbundle_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fbundle_005f0_reused);
      }
      out.write("\n");
      out.write("    ");
      } 
      out.write("\n");
      out.write("    <div class=\"resource-tree-box\" ");
 if (displayTreeNavigation) { 
      out.write("style='height:100% !important;'");
 }
      out.write('>');
      out.write('\n');

    if (displayResourceTree) {
        String fatherId = "father_"+rootName;

      out.write("\n");
      out.write("        <div id=\"");
      out.print(Encode.forHtmlAttribute(fatherId));
      out.write("\" class=\"father-object\">\n");

    boolean hideResources = request.getParameter("hideResources") != null;

            if (expansionPath == null) {
                String plusId = "plus_"+rootName;
                String minusId = "minus_"+rootName;
                String childId = "child_"+rootName;
        
      out.write("\n");
      out.write("        <a onclick=\"loadSubTree('");
      out.print(Encode.forHtml(rootPath));
      out.write("', '");
      out.print(Encode.forJavaScript(rootName));
      out.write("',\n");
      out.write("                '");
      out.print(Encode.forJavaScript(textBoxId));
      out.write("', '");
      out.print((hideResources? "true" : "false"));
      out.write("');\">\n");
      out.write("            <img style=\"margin-right: 5px;\" id=\"");
      out.print(Encode.forHtmlAttribute(plusId));
      out.write("\"\n");
      out.write("                 src=\"../resources/images/icon-tree-plus.jpg\"/>\n");
      out.write("            <img style=\"display:none; margin-right: 5px;\" id=\"");
      out.print(Encode.forHtmlAttribute(minusId));
      out.write("\"\n");
      out.write("                 src=\"../resources/images/icon-tree-minus.jpg\"/></a>\n");
      out.write("        <a onclick=\"pickPath('");
      out.print(Encode.forHtml(rootPath));
      out.write("', '");
      out.print(Encode.forJavaScript(textBoxId));
      out.write("',\n");
      out.write("                '");
      out.print(Encode.forJavaScript(rootName));
      out.write("');\"><img style=\"margin-right: 2px;\"\n");
      out.write("                                                        src=\"../resources/images/icon-folder-small.gif\"/>");
      out.print(Encode.forHtml(rootPath));
      out.write("\n");
      out.write("        </a>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"");
      out.print(Encode.forHtmlAttribute(childId));
      out.write("\" class=\"child-objects\"></div>\n");
      out.write("    ");

    } else {
        session.removeAttribute("resource-tree-expansion-path");
        ResourceServiceClient client;
        String reference;
        try {
            String cookie =
                    (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
            client = new ResourceServiceClient(cookie, config, request.getSession());
            reference = Utils.buildReference(expansionPath, client, rootName);
        } catch (Exception ignored) {
            ignored.printStackTrace();
            return;
        }
        if (!expansionPath.equals("")) {
            Stack<String> pathStack = new Stack<String>();
            String path = expansionPath;
            if (!path.equals("/")) {
                boolean isCollection = false;
                try {
                    ResourceTreeEntryBean bean = client.getResourceTreeEntry(path);
                    isCollection = bean.getCollection();
                } catch (Exception ignored) {
                    // We won't expand the collection, if an error occurs.
                }
                if (isCollection) {
                    pathStack.push(path);
                } else if (reference.lastIndexOf("_") > 0) {
                    reference = reference.substring(0, reference.lastIndexOf("_"));
                }
                path = RegistryUtils.getParentPath(path);
            }
            while (path != null && !path.equals("/")) {
                pathStack.push(path);
                path = RegistryUtils.getParentPath(path);
            }
            int count = 0;
            StringBuffer sb = new StringBuffer();
            sb.append("loadSubTree('/', '" + rootName +
                    "', '" + textBoxId +"', 'false', function() {");
            int depth = pathStack.size();
            while (!pathStack.empty()) {
                String temp = pathStack.pop();
                count++;
                sb.append("loadSubTree('");
                sb.append(temp);
                sb.append("', '");
                temp = reference;
                for (int i = count; i < depth; i++) {
                    if (temp.lastIndexOf("_") > 0) {
                        temp = temp.substring(0, temp.lastIndexOf("_"));
                    } else {
                        temp = rootName;
                    }
                }
                sb.append(temp);
                sb.append("', '" + textBoxId +"', 'false'");
                if (pathStack.empty()) {
                    sb.append(")");
                } else {
                    sb.append(", function() {");
                }
            }
            count--;
            while(count > 0) {
                count--;
                sb.append("})");
            }
            sb.append("});");

            String plusId = "plus_"+rootName;
            String minusId = "minus_"+rootName;
            String childId = "child_"+rootName;
    
      out.write("\n");
      out.write("    <a onclick=\"");
      out.print(Encode.forJavaScript(sb.toString()));
      out.write("\">\n");
      out.write("        <img style=\"margin-right: 5px;\" id=\"");
      out.print(Encode.forHtmlAttribute(plusId));
      out.write("\"\n");
      out.write("             src=\"../resources/images/icon-tree-plus.jpg\"/>\n");
      out.write("        <img style=\"display:none; margin-right: 5px;\" id=\"");
      out.print(Encode.forHtmlAttribute(minusId));
      out.write("\"\n");
      out.write("             src=\"../resources/images/icon-tree-minus.jpg\"/></a>\n");
      out.write("    <a onclick=\"pickPath('");
      out.print(Encode.forHtml(rootPath));
      out.write("', '");
      out.print(Encode.forJavaScript(Encode.forHtml(textBoxId)));
      out.write("',\n");
      out.write("            '");
      out.print(Encode.forHtml(rootName));
      out.write("');\"><img style=\"margin-right: 2px;\"\n");
      out.write("                                                    src=\"../resources/images/icon-folder-small.gif\"/>");
      out.print(Encode.forHtml(rootPath));
      out.write("\n");
      out.write("    </a>\n");
      out.write("</div>\n");
      out.write("<div id=\"");
      out.print(Encode.forHtmlAttribute(childId));
      out.write("\" class=\"child-objects\"></div>\n");
      out.write("\n");

        }
        }
        }

      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 }
    
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fmessage_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f0_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /resources/resource_tree_ajaxprocessor.jsp(97,34) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f0.setKey("resource.paths");
      int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
      _jspx_th_fmt_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f1 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f1_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f1.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /resources/resource_tree_ajaxprocessor.jsp(101,8) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f1.setKey("picked.path");
      int _jspx_eval_fmt_005fmessage_005f1 = _jspx_th_fmt_005fmessage_005f1.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f1);
      _jspx_th_fmt_005fmessage_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f1, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_fmt_005fbundle_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f2 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f2_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f2.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
      // /resources/resource_tree_ajaxprocessor.jsp(104,87) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f2.setKey("ok");
      int _jspx_eval_fmt_005fmessage_005f2 = _jspx_th_fmt_005fmessage_005f2.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f2);
      _jspx_th_fmt_005fmessage_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f2, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f2_reused);
    }
    return false;
  }
}
