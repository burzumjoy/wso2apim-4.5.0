/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.94
 * Generated at: 2025-07-24 19:55:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.carbon.registry.common.utils.CommonUtil;
import org.wso2.carbon.registry.common.utils.RegistryUtil;
import org.wso2.carbon.registry.core.RegistryConstants;
import org.wso2.carbon.registry.resource.ui.Utils;
import org.wso2.carbon.registry.resource.ui.clients.ResourceServiceClient;
import org.wso2.carbon.registry.resource.stub.beans.xsd.MetadataBean;
import org.wso2.carbon.registry.resource.stub.beans.xsd.VersionPath;
import org.wso2.carbon.registry.resource.stub.beans.xsd.VersionsBean;
import org.wso2.carbon.registry.resource.stub.common.xsd.ResourceData;
import org.wso2.carbon.registry.resource.stub.common.xsd.WebResourcePath;
import org.wso2.carbon.ui.CarbonUIMessage;
import org.wso2.carbon.ui.CarbonUIUtil;
import org.wso2.carbon.utils.ServerConstants;
import org.owasp.encoder.Encode;

public final class metadata_005fresourcepath_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(19);
    _jspx_imports_classes.add("org.wso2.carbon.registry.common.utils.CommonUtil");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.ui.Utils");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.beans.xsd.MetadataBean");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.beans.xsd.VersionPath");
    _jspx_imports_classes.add("org.wso2.carbon.ui.CarbonUIUtil");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.beans.xsd.VersionsBean");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.ui.clients.ResourceServiceClient");
    _jspx_imports_classes.add("org.wso2.carbon.registry.core.RegistryConstants");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.common.xsd.ResourceData");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.wso2.carbon.registry.resource.stub.common.xsd.WebResourcePath");
    _jspx_imports_classes.add("org.wso2.carbon.ui.CarbonUIMessage");
    _jspx_imports_classes.add("org.wso2.carbon.utils.ServerConstants");
    _jspx_imports_classes.add("org.wso2.carbon.registry.common.utils.RegistryUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    String cookie = (String) session.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);
    String viewMode = Utils.getResourceViewMode(request);
    String synapseRegistryMetaDataRootPath =
            RegistryConstants.ROOT_PATH + "carbon" + RegistryConstants.PATH_SEPARATOR + "synapse-registries";
    String resourceConsumer = Utils.getResourceConsumer(request);
    resourceConsumer = Encode.forHtmlAttribute(resourceConsumer);
    String targetDivID = Utils.getTargetDivID(request);
    String synapseRegistryRoot = "";
    MetadataBean metadata;
    ResourceData [] resourceData;

    ResourceServiceClient client;
    try {
        /*if(request.getParameter("item") != null){
            client = new ResourceServiceClient(cookie, config, session);
            metadata = client.getMetadata(request,request.getParameter("item"));
//            metadata = client.getMetadata(request);

        }
        else{*/

            client = new ResourceServiceClient(cookie, config, session);
            metadata = client.getMetadata(request);
        /*}*/
    } catch (Exception e) {
        request.setAttribute(CarbonUIMessage.ID,new CarbonUIMessage(RegistryConstants.REGISTRY_UNAUTHORIZED_ERROR,RegistryConstants.REGISTRY_UNAUTHORIZED_ERROR,null));

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("../admin/error.jsp?<%=e.getMessage()%>");
        return;
      }
      out.write('\r');
      out.write('\n');

        return;
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"width:100%\">\r\n");
      out.write("    <tr class=\"top-toolbar-back\">\r\n");
      out.write("        <td valign=\"middle\" style=\"width:35px;\" nowrap=\"nowrap\">\r\n");
      out.write("\r\n");
      out.write("            <!-- Page resource path prints here -->\r\n");
      out.write("\r\n");
      out.write("            ");

                WebResourcePath[] iNavPaths = metadata.getNavigatablePaths();
                String path = "";
                if (iNavPaths.length > 0) {
                    WebResourcePath rootPath = iNavPaths[0];
                    try {
                        client = new ResourceServiceClient(cookie, config, session);
                        synapseRegistryRoot = client.getProperty(synapseRegistryMetaDataRootPath, "SYNAPSE_REGISTRY_ROOT");
                        path = RegistryConstants.ROOT_PATH;
                    } catch (Exception ignored) {
                    }

            
      out.write("\r\n");
      out.write("            <a href=\"#\" style=\"font-size:10px;font-weight:bold;position:absolute;margin-top:-10px;margin-left:5px;\"\r\n");
      out.write("               onclick=\"document.location.href = '../resources/resource.jsp?region=region3&item=resource_browser_menu&path=/&viewType=std&screenWidth=' + screen.width;\"\r\n");
      out.write("               title=\"Go to root resource\">Root<br/><img\r\n");
      out.write("                    src=\"../resources/images/to-root.gif\" border=\"0\" align=\"top\"/></a>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td valign=\"middle\" style=\"padding-left:0px;\"><a class=\"registry-breadcrumb\"\r\n");
      out.write("                                                         href=\"#\"\r\n");
      out.write("                                                         onclick=\"document.location.href = '../resources/resource.jsp?region=region3&item=resource_browser_menu&path=/&viewType=std&screenWidth=' + screen.width;\"\r\n");
      out.write("                                                         title=\"root\">/</a>");



            if (iNavPaths.length > 1) {
                WebResourcePath childPath = iNavPaths[1];
                path = childPath.getNavigatePath();
                try {
                    client = new ResourceServiceClient(cookie, config, session);
                    String paths [] = {path};
                    resourceData = client.getResourceData(paths);
                } catch (Exception e) {
                    
      out.write("\r\n");
      out.write("                        ");
      if (true) {
        _jspx_page_context.forward("../admin/error.jsp?<%=e.getMessage()%>");
        return;
      }
      out.write("\r\n");
      out.write("                    ");

                    return;
                }

                if (resourceData != null && resourceData[0] != null && (resourceData[0].getMounted() || resourceData[0].getLink())) {
                    
      out.write("<a class=\"registry-breadcrumb\" href=\"#\"\r\n");
      out.write("             onclick=\"loadResourcePage('");
      out.print(Encode.forHtml(childPath.getNavigatePath()));
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(viewMode);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(resourceConsumer);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(targetDivID);
      out.write("')\"><i>");
      out.print(Encode.forHtml(childPath.getNavigateName()));
      out.write("</i></a>");

                } else {
        
      out.write("<a class=\"registry-breadcrumb\" href=\"#\"\r\n");
      out.write("             onclick=\"loadResourcePage('");
      out.print(Encode.forHtml(childPath.getNavigatePath()));
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(viewMode);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(resourceConsumer);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(targetDivID);
      out.write("')\">");
      out.print(Encode.forHtml(childPath.getNavigateName()));
      out.write("</a>");


                }
            }

            if (iNavPaths.length > 2) {
                for (int i = 2; i < iNavPaths.length; i++) {
                    WebResourcePath resourcePath = iNavPaths[i];
                    path = resourcePath.getNavigatePath();

                    try {
                    client = new ResourceServiceClient(cookie, config, session);
                    String paths [] = {path};
                    resourceData = client.getResourceData(paths);
                } catch (Exception e) {
                    
      out.write("\r\n");
      out.write("                        ");
      if (true) {
        _jspx_page_context.forward("../admin/error.jsp?<%=e.getMessage()%>");
        return;
      }
      out.write("\r\n");
      out.write("                    ");

                    return;
                }

                if (resourceData != null && resourceData[0] != null && (resourceData[0].getMounted() || resourceData[0].getLink())) {
                    
      out.write("/<a class=\"registry-breadcrumb\" href=\"#\"\r\n");
      out.write("              onclick=\"loadResourcePage('");
      out.print(Encode.forHtml(resourcePath.getNavigatePath()));
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(viewMode);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(resourceConsumer);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(targetDivID);
      out.write("')\"><div style=\"display:inline\" id=");
      out.print("pathResult"+i );
      out.write("><i>");
      out.print(Encode.forHtml(resourcePath.getNavigateName()));
      out.write("</i></div></a>");

            } else {
        
      out.write("/<a class=\"registry-breadcrumb\" href=\"#\"\r\n");
      out.write("              onclick=\"loadResourcePage('");
      out.print(Encode.forHtml(resourcePath.getNavigatePath()));
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(viewMode);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(resourceConsumer);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(targetDivID);
      out.write("')\"><div style=\"display:inline\" id=");
      out.print("pathResult"+i );
      out.write('>');
      out.print(Encode.forHtml(resourcePath.getNavigateName()));
      out.write("</div></a>");

                    }
                }
            }
            if (path != null && !"".equals(path)) {
                String correctPath = Utils.resolveResourceKey(path, synapseRegistryRoot);
        
      out.write("\r\n");
      out.write("            <script type=\"text/javascript\">\r\n");
      out.write("                setResourcePathOnConsumer('");
      out.print(Encode.forHtml(resourceConsumer));
      out.write("', '");
      out.print(Encode.forHtml(correctPath));
      out.write('\'');
      out.write(',');
      out.print(iNavPaths.length);
      out.write(");\r\n");
      out.write("            </script>\r\n");
      out.write("            ");

                    }
                }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <span style=\"clear:both;\"/>\r\n");
      out.write("            <input id=\"hidden_media_type\" type=\"hidden\" value=\"");
      out.print(Encode.forHtml(metadata.getMediaType()));
      out.write("\"/>\r\n");
      out.write("        </td>\r\n");
      out.write("\r\n");
      out.write("    </tr>\r\n");
      out.write("</table>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
